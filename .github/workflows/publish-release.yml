name: 自动发布新版并部署到服务器

# 在特定 tag 被 push 以后触发
on:
  push:
    tags:
      - "v.*.*.*"

jobs:
  publish-release:
    runs-on: ubuntu-latest
    steps:
      # 1、checkout 代码
      - name: Checkout git source
        uses: actions/checkout@v2

      # 2、创建 env 文件
      # 用于 build docker image
      # 用于 start the app
      - name: create env file
        run: |
          touch .env
          echo AL_ACCESS_KEY_ID=${{ secrets.AL_ACCESS_KEY_ID }} >> .env
          echo AL_ACCESS_KEY_SECRET=${{ secrets.AL_ACCESS_KEY_SECRET }} >> .env
          echo GITEE_CLIENT_ID=${{ secrets.GITEE_CLIENT_ID }} >> .env
          echo GITEE_CLIENT_SECRET=${{ secrets.GITEE_CLIENT_SECRET }} >> .env
          echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> .env
          echo MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }} >> .env
          echo MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }} >> .env
          echo MONGO_DB_USERNAME=${{ secrets.MONGO_DB_USERNAME }} >> .env
          echo MONGO_DB_PASSWORD=${{ secrets.MONGO_DB_PASSWORD }} >> .env
          echo REDIS_DB_PASSWORD=${{ secrets.REDIS_DB_PASSWORD }} >> .env

      # 3、使用阿里云的 ACR 完成 docker login
      - name: Login to Aliyun Container Registry (ACR)
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          region-id: cn-hangzhou
          username: "${{ secrets.ACR_USERNAME }}"
          password: "${{ secrets.ACR_PASSWORD }}"

      # 4、使用正确的阿里云 tag 进行 docker build
      - name: Build image for Docker
        run: docker build --tag "registry.cn-hangzhou.aliyuncs.com/jason-aurora/aurora:${{ github.ref_name }}" .

      # 5、推送 image 到阿里云 ARC
      - name: Push image to ACR
        run: docker push registry.cn-hangzhou.aliyuncs.com/jason-aurora/aurora:${{ github.ref_name }}

      # 6、查找 docker-compose-online.yml 并替换 {{tag}} 占位符
      - name: Find and replace
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "{{tag}}"
          replace: "${{ github.ref_name }}"
          include: "docker-compose-online.yml"
      - run: cat docker-compose-online.yml

      # 7、拷贝文件到文件夹：.env, docker-compose-online.yml, mongo-entrypoint
      - name: Copy files in to one folder
        run: |
          mkdir aurora-backend
          cp .env docker-compose-online.yml aurora-backend
          cp -r mongo-entrypoint aurora-backend
          ls -la aurora-backend

      # 8、通过 scp 拷贝文件到服务器上
      - name: Copy aurora-backup folder via scp
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PWD }}
          source: "aurora-backend"
          target: "~/aurora"

      # 9、通过 ssh 登录服务器并重启服务
      - name: Executing ssh and restart docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PWD }}
          script_stop: true
          # * 登录 阿里云 ACR
          # * 进入文件夹
          # * 停止服务
          # * 启动服务
          # * 清理工作，删除 .env 退出 docker 账号
          script: |
            docker login -u ${{ secrets.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }} registry.cn-hangzhou.aliyuncs.com
            cd ~/aurora/aurora-backend
            docker-compose -f docker-compose-online.yml down
            docker-compose -f docker-compose-online.yml up -d
            rm -rf .env
            docker logout registry.cn-hangzhou.aliyuncs.com

